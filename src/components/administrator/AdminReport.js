import React, { useState, useEffect } from 'react';
import patient from '../../assets/patient.png';
import { Link,useNavigate } from 'react-router-dom';
import axios from 'axios';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const AdminReport = () => {
const [sidebarActive, setSidebarActive] = useState(false);
const [adminDetails, setAdminDetails] = useState({});
const [bursaryInfo, setBursaryInfo] = useState({});
const [applicationInfo, setApplicationInfo] = useState({});
const navigate = useNavigate();
  
// Function to toggle sidebar active state
const toggleSidebar = () => {
setSidebarActive(!sidebarActive);
};

useEffect(() => {
const token = sessionStorage.getItem('authToken');
if (!token) {
navigate('/signin'); // Redirect if not authenticated
return;
}

axios
.get('http://localhost:5000/api/committee-count')
.then((response) => {
setBursaryInfo({
totalFunds: response.data.amount,
allocated: response.data.allocated,
remaining: response.data.remaining,
});
})
.catch((error) => console.error('Error fetching bursary info:', error));

axios
.get('http://localhost:5000/api/quick-statistics')
.then((response) => {
setApplicationInfo({
total: response.data.total,
approved: response.data.approved,
rejected: response.data.rejected,
});
      })
      .catch((error) => console.error('Error fetching application statistics:', error));
      // Fetch admin details
    axios.get('http://localhost:5000/api/admin-details')
    .then(response => {
        setAdminDetails({
            name: response.data.name,
            email: response.data.email,
        });
    })
    .catch(error => console.error('Error fetching admin details:', error));
  }, [navigate]);

  const downloadReport = () => {
    const doc = new jsPDF();

    doc.setFont('times', 'normal');
    doc.setFontSize(25);
    doc.text('Bursary Report', 105, 20, null, null, 'center');
    doc.setFontSize(20);
    doc.text('Generated by Bursary Management System', 105, 30, null, null, 'center');
    doc.line(10, 35, 200, 35);

    // Personal Information Table
    const personalInfo = [
      ['Full Name', adminDetails.name || 'N/A'],
      ['Email', adminDetails.email || 'N/A'],
    ];

    doc.autoTable({
      startY: 50,
      head: [['Personal Information', 'Details']],
      body: personalInfo,
      theme: 'striped',
      headStyles: { fillColor: [41, 128, 185], textColor: [255, 255, 255], fontSize: 14 },
      bodyStyles: { fontSize: 12 },
      styles: { font: 'times' },
    });

    // Bursary Information Table
    const bursaryData = [
      ['Total Funds Available', bursaryInfo.totalFunds || 'N/A'],
      ['Allocated Funds', bursaryInfo.allocated || 'N/A'],
      ['Remaining Funds', bursaryInfo.remaining || 'N/A'],
    ];

    doc.autoTable({
      startY: doc.lastAutoTable.finalY + 10,
      head: [['Bursary Information', 'Details']],
      body: bursaryData,
      theme: 'grid',
      headStyles: { fillColor: [39, 174, 96], textColor: [255, 255, 255], fontSize: 14 },
      bodyStyles: { fontSize: 12 },
      styles: { font: 'times' },
    });

    // Application Information Table
    const applicationData = [
      ['Total Applications', applicationInfo.total || 'N/A'],
      ['Approved Applications', applicationInfo.approved || 'N/A'],
      ['Rejected Applications', applicationInfo.rejected || 'N/A'],
    ];

    doc.autoTable({
      startY: doc.lastAutoTable.finalY + 10,
      head: [['Application Information', 'Details']],
      body: applicationData,
      theme: 'grid',
      headStyles: { fillColor: [192, 57, 43], textColor: [255, 255, 255], fontSize: 14 },
      bodyStyles: { fontSize: 12 },
      styles: { font: 'times' },
    });

    // Declaration Table
    const declarationInfo = [
        ['Declaration', 'I hereby confirm the above details are accurate and complete.'],
        ['Committee Member Name', '________________________'],
        ['Signature', '________________________'],
        ['Date', '________________________'],
      ];
    
      // Render Declaration Table
      doc.autoTable({
        startY: doc.lastAutoTable.finalY + 20,
        head: [['Declaration', '']],
        body: declarationInfo,
        theme: 'grid',
        headStyles: { fillColor: [192, 57, 43], textColor: [255, 255, 255] ,fontSize: 14 },
        bodyStyles: { fontSize: 12, halign: 'left' },
        styles: { font: 'times' }, // Set font family for the table
      });
    

    // Footer Section
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 10, 290);
    doc.text('Bursary Management System', 105, 290, null, null, 'center');

    // Save the PDF
    doc.save('Bursary_Report.pdf');
  };
  return (
<div>
{/* Top Bar */}
<div className="topbaradmin">
<div className="logo">
<h2>EBursary</h2>
</div>
<div className="search">
<input type="text" id="search" placeholder="search here" />
<label htmlFor="search">
<i className="bi bi-search"></i>
</label>
</div>
<h1 className='welcoming'>Welcome:{adminDetails.name}</h1>
<div className="user">
<img src={patient} alt="User" />
</div>
</div>
{/* Sidebar */}
<div className={`sidebaradmin ${sidebarActive ? 'active' : ''}`}>
<div>
<i className="bi bi-list" id="btn" onClick={toggleSidebar}></i>
<ul>
<li>
<Link to='/admindashboard'>
<i className="bi bi-house-door-fill"></i>
<span className="links-name">Dashboard</span>
</Link>
<span className="tooltip">Dashboard</span>
</li>
<li>
<Link to="/usermanagement">
<i class="bi bi-person-fill-gear"></i>
<span className="links-name">User Management</span>
</Link>
<span className="tooltip">User Management</span>
</li>
<li>
<Link to="/bursaryfund">
<i class="bi bi-bank"></i>
<span className="links-name">Bursary Management</span>
</Link>
<span className="tooltip">Bursary Management</span>
</li>
<li>
<Link to="/monitoring">
<i class="bi bi-file-earmark-person"></i>
<span className="links-name">Application Monitoring</span>
</Link>
<span className="tooltip">Application Monitoring</span>
</li>
<li>
<Link to="/adminreport">
<i class="bi bi-bar-chart-fill"></i>
<span className="links-name">Analysis</span>
</Link>
<span className="tooltip">Analysis</span>
</li>
<li>
<Link to='/auditlogs'>
<i class="bi bi-list-check"></i>
<span className="links-name">Audit logs</span>
</Link>
<span className="tooltip">Audit logs</span>
</li>
<li>
<Link to='/adminsetting'>
<i className="bi bi-gear-fill"></i>
<span className="links-name">Settings</span>
</Link>
<span className="tooltip">Settings</span>
</li>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br>
<div className="Navigation">
<li>
<Link to='/'>
<i className="bi bi-box-arrow-right"></i>
<span className="links-name">Logout</span>
</Link>
<span className="tooltip">Logout</span>
</li>
</div>
</ul>
</div>
</div>
<div className="report-container">
        <h1>Bursary Report</h1>
        <table className="report-table">
          <thead>
            <tr>
              <th>Reference Number</th>
              <th>Application Title</th>
              <th>Download Application</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td></td>
              <td>Committee Report</td>
              <td>
                <i className="bi bi-download" onClick={downloadReport}></i>
              </td>
            </tr>
          </tbody>
        </table>
      </div>     
</div>
  )
}

export default AdminReport
